library(ballgown) #for differential expression analysis
library(RColorBrewer) #or RSkittleBrewer for plot coloring
library(genefilter) #calc of means and variances
library(dplyr) #sort and arrange results
library(devtools) #to ensure reproducibility and install relevant packages
library(RColorBrewer)
library(gplots)
library(plyr)
pheno_data <- read.csv("metadata.csv", sep=",")
View(pheno_data)
pheno_data <- read.csv("metadata.csv", sep=",")
View(pheno_data)
bg_data <- ballgown(dataDir = "/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/counts/", samplePattern = "SRR", pData=pheno_data)
pheno_data <- read.csv("meta_data.csv", sep=",")
View(pheno_data)
pheno_data <- read.csv("meta_data.csv", sep=",")
bg_data <- ballgown(dataDir = "/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/counts/", samplePattern = "SRR", pData=pheno_data)
#rowVars calculated vatiance of each row
bg_filt = subset(bg_data,"rowVars(texpr(bg_data)) >1",genomesubset=TRUE) #subset subset only specific samples og genomic locations
bg_table = texpr(bg_filt, 'all') #texpr (extract transcrip-level expressions from bg objects )
bg_gene_names = unique(bg_table[, 9:10])  #takes unique values(all rows) from column 9 and 10 which gene id and gene name
gene_expression = as.data.frame(gexpr(bg_filt))
rownames(gene_expression)
colnames(gene_expression) <- gsub(pattern = "FPKM.", replacement = "", x = names(gene_expression))
#results_transcripts <- stattest(bg_filt, feature="transcript", covariate="phenotype", getFC=TRUE, meas="FPKM", adjustvars = NULL)
results_genes <- stattest(bg_filt, feature="gene", covariate="condition", getFC=TRUE, meas="FPKM",  adjustvars = NULL)
#results_transcripts <- stattest(bg_filt, feature="transcript", covariate="phenotype", getFC=TRUE, meas="FPKM", adjustvars = NULL)
results_genes <- stattest(bg_filt, feature="gene", covariate="type", getFC=TRUE, meas="FPKM",  adjustvars = NULL)
write.csv(bg_gene_names, "bg_gene_names.csv")
write.csv(bg_table, "bg_table.csv")
write.csv(results_genes, "results_genes.csv")
#results_transcriptsmer = data.frame(geneNames=ballgown::geneNames(bg_filt), geneIDs=ballgown::geneIDs(bg_filt), transcriptNames=ballgown::transcriptNames(bg_filt), results_transcripts)
results_genes <- arrange(results_genes,pval)
#results_transcripts$logFC <- log2(results_transcripts$fc)
results_genes$logFC <- log2(results_genes$fc) #taking log of Fold Chanage Values
#write.csv(results_transcripts, "transcript_results.csv",row.names=FALSE)
write.csv(results_genes, "gene_results_log_fc_p_value_arranged.csv", row.names=FALSE)
#subset(results_transcripts,results_transcripts$qval<0.05)
subset(results_genes,results_genes$pval<0.05)
# subset of result transcripts where pvalue is less than 0.05
#tra <- subset(results_transcripts,results_transcripts$pval<0.05)
gen <- subset(results_genes,results_genes$pval<0.05) #confirm it first
#write.csv(tra, "filtered transcripts.csv")
write.csv(gen, "filtered_genes_qval_0.05.csv") #confirm it first
################################# enhanced volcano###########################
library(ggplot2)
library(ggrepel)
library(EnhancedVolcano)
indices <- match(results_genes$id, texpr(bg_data, 'all')$gene_id)
gene_names_for_result <- texpr(bg_data, 'all')$gene_name[indices]
final_data_Frame <- data.frame(geneNames=gene_names_for_result, results_genes)
write.csv(final_data_Frame,"deg_result_genes_with_gene_names.csv")
final_without_dots <- subset(final_data_Frame, geneNames!=".")
EnhancedVolcano(final_without_dots,
lab = final_without_dots$geneNames,
x = "logFC",
y = "pval",
pCutoff = 0.05,
FCcutoff = 1,
title = "tumor vs. normal")
EnhancedVolcano(final_without_dots,
lab = final_without_dots$geneNames,
x = "logFC",
y = "pval",
pCutoff = 0.05,
FCcutoff = 1,
title = "CRC vs. normal")
library(ballgown) #for differential expression analysis
library(RColorBrewer) #or RSkittleBrewer for plot coloring
library(genefilter) #calc of means and variances
library(dplyr) #sort and arrange results
library(devtools) #to ensure reproducibility and install relevant packages
library(RColorBrewer)
library(gplots)
library(plyr)
pheno_data <- read.csv("meta_data.csv", sep=",")
bg_data <- ballgown(dataDir = "/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/count/", samplePattern = "SRR", pData=pheno_data)
bg_data <- ballgown(dataDir ="/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/count/", samplePattern = "SRR", pData=pheno_data)
pheno_data <- read.csv("meta_data.csv", sep=",")
bg_data <- ballgown(dataDir = "/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/counts/", samplePattern = "SRR", pData=pheno_data)
#rowVars calculated vatiance of each row
bg_filt = subset(bg_data,"rowVars(texpr(bg_data)) >1",genomesubset=TRUE) #subset subset only specific samples og genomic locations
bg_table = texpr(bg_filt, 'all') #texpr (extract transcrip-level expressions from bg objects )
bg_gene_names = unique(bg_table[, 9:10])  #takes unique values(all rows) from column 9 and 10 which gene id and gene name
gene_expression = as.data.frame(gexpr(bg_filt))
rownames(gene_expression)
colnames(gene_expression) <- gsub(pattern = "FPKM.", replacement = "", x = names(gene_expression))
#results_transcripts <- stattest(bg_filt, feature="transcript", covariate="phenotype", getFC=TRUE, meas="FPKM", adjustvars = NULL)
results_genes <- stattest(bg_filt, feature="gene", covariate="type", getFC=TRUE, meas="FPKM",  adjustvars = NULL)
write.csv(bg_gene_names, "bg_gene_names.csv")
write.csv(bg_table, "bg_table.csv")
write.csv(results_genes, "results_genes.csv")
#results_transcriptsmer = data.frame(geneNames=ballgown::geneNames(bg_filt), geneIDs=ballgown::geneIDs(bg_filt), transcriptNames=ballgown::transcriptNames(bg_filt), results_transcripts)
results_genes <- arrange(results_genes,pval)
#results_transcripts$logFC <- log2(results_transcripts$fc)
results_genes$logFC <- log2(results_genes$fc) #taking log of Fold Chanage Values
#write.csv(results_transcripts, "transcript_results.csv",row.names=FALSE)
write.csv(results_genes, "gene_results_log_fc_p_value_arranged.csv", row.names=FALSE)
#subset(results_transcripts,results_transcripts$qval<0.05)
subset(results_genes,results_genes$pval<0.05)
# subset of result transcripts where pvalue is less than 0.05
#tra <- subset(results_transcripts,results_transcripts$pval<0.05)
gen <- subset(results_genes,results_genes$pval<0.05) #confirm it first
#write.csv(tra, "filtered transcripts.csv")
write.csv(gen, "filtered_genes_qval_0.05.csv") #confirm it first
################################# enhanced volcano###########################
library(ggplot2)
library(ggrepel)
library(EnhancedVolcano)
indices <- match(results_genes$id, texpr(bg_data, 'all')$gene_id)
gene_names_for_result <- texpr(bg_data, 'all')$gene_name[indices]
final_data_Frame <- data.frame(geneNames=gene_names_for_result, results_genes)
write.csv(final_data_Frame,"deg_result_genes_with_gene_names.csv")
final_without_dots <- subset(final_data_Frame, geneNames!=".")
EnhancedVolcano(final_without_dots,
lab = final_without_dots$geneNames,
x = "logFC",
y = "pval",
pCutoff = 0.05,
FCcutoff = 1,
title = "CLL IGVH-Non-Mutated vs. NORMAL B-CELLS")
#trans <- subset(results_transcriptsmer, pval < 0.05)
#trans <- subset(results_transcriptsmer, fc < -0.5 | fc > 0.5)
#final_set <- subset(results_transcriptsmer, pval < 0.05)
final_set <- subset(final_without_dots, logFC < -1 | logFC > 1 & pval < 0.05)
downreg <- subset(final_without_dots, logFC < -1 & pval < 0.05)
upreg <- subset(final_without_dots, logFC > 1 & pval < 0.05)
# sorting of down and up regulated genes
sorted_downreg <- (arrange(downreg,logFC))
sorted_upreg <- upreg %>% arrange(desc(logFC))
write.csv(sorted_downreg,"sorted_downregulated_crc.csv")
write.csv(sorted_upreg,"sorted_upregulated_crc.csv")
# To retrieve top 10 dysregulated genes
top10_downreg <- head(arrange(downreg,logFC), 10)
top10_upreg <- upreg %>% arrange(desc(logFC)) %>% head(10)
write.csv(top10_downreg,"top10_downregulated_crc.csv")
write.csv(top10_upreg,"top10_upregulated_crc.csv")
write.csv(downreg,"final_downregulated.csv")
write.csv(upreg,"final_upregulated.csv")
write.csv(final_set,"final.csv")
write.csv(final_without_dots,"in_case_threshold_final.csv")
library(ballgown) #for differential expression analysis
library(RColorBrewer) #or RSkittleBrewer for plot coloring
library(genefilter) #calc of means and variances
library(dplyr) #sort and arrange results
library(devtools) #to ensure reproducibility and install relevant packages
library(RColorBrewer)
library(gplots)
library(plyr)
pheno_data <- read.csv("meta_data.csv", sep=",")
bg_data <- ballgown(dataDir = "/home/mehwish/Desktop/hdd_ease_RNASeq_colorectal_main/quantification/counts/", samplePattern = "SRR", pData=pheno_data)
#rowVars calculated vatiance of each row
bg_filt = subset(bg_data,"rowVars(texpr(bg_data)) >1",genomesubset=TRUE) #subset subset only specific samples og genomic locations
bg_table = texpr(bg_filt, 'all') #texpr (extract transcrip-level expressions from bg objects )
bg_gene_names = unique(bg_table[, 9:10])  #takes unique values(all rows) from column 9 and 10 which gene id and gene name
gene_expression = as.data.frame(gexpr(bg_filt))
rownames(gene_expression)
colnames(gene_expression) <- gsub(pattern = "FPKM.", replacement = "", x = names(gene_expression))
#results_transcripts <- stattest(bg_filt, feature="transcript", covariate="phenotype", getFC=TRUE, meas="FPKM", adjustvars = NULL)
results_genes <- stattest(bg_filt, feature="gene", covariate="type", getFC=TRUE, meas="FPKM",  adjustvars = NULL)
write.csv(bg_gene_names, "bg_gene_names.csv")
write.csv(bg_table, "bg_table.csv")
write.csv(results_genes, "results_genes.csv")
#results_transcriptsmer = data.frame(geneNames=ballgown::geneNames(bg_filt), geneIDs=ballgown::geneIDs(bg_filt), transcriptNames=ballgown::transcriptNames(bg_filt), results_transcripts)
results_genes <- arrange(results_genes,pval)
#results_transcripts$logFC <- log2(results_transcripts$fc)
results_genes$logFC <- log2(results_genes$fc) #taking log of Fold Chanage Values
#write.csv(results_transcripts, "transcript_results.csv",row.names=FALSE)
write.csv(results_genes, "gene_results_log_fc_p_value_arranged.csv", row.names=FALSE)
#subset(results_transcripts,results_transcripts$qval<0.05)
subset(results_genes,results_genes$pval<0.05)
# subset of result transcripts where pvalue is less than 0.05
#tra <- subset(results_transcripts,results_transcripts$pval<0.05)
gen <- subset(results_genes,results_genes$pval<0.05) #confirm it first
#write.csv(tra, "filtered transcripts.csv")
write.csv(gen, "filtered_genes_qval_0.05.csv") #confirm it first
################################# enhanced volcano###########################
library(ggplot2)
library(ggrepel)
library(EnhancedVolcano)
indices <- match(results_genes$id, texpr(bg_data, 'all')$gene_id)
gene_names_for_result <- texpr(bg_data, 'all')$gene_name[indices]
final_data_Frame <- data.frame(geneNames=gene_names_for_result, results_genes)
write.csv(final_data_Frame,"deg_result_genes_with_gene_names.csv")
final_without_dots <- subset(final_data_Frame, geneNames!=".")
EnhancedVolcano(final_without_dots,
lab = final_without_dots$geneNames,
x = "logFC",
y = "pval",
pCutoff = 0.05,
FCcutoff = 1,
title = "CRC vs. NORMAL")
